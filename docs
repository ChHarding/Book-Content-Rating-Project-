# Developer's Documentation 
Book Content Warning Generator 

## Program Overview
The purpose of this program is to provide users with content warnings for books. Nine content areas are evaluated for each book searched by the user (listed below). If the content is present in the book information within the search engine, the category is included in the warning section of the search results. To assist with accuracy, after searching for a title, users are presented with a list of search results to choose from. Once they select the correct book, users receive the book description, author name, appropriate content warnings, a photo of the book cover, and a link to purchase the book online in the search results box. All information is subject to availability. 

### Content Warning Categories: 
  1.	Animal Abuse
  2.	Sexual Violence
  3.	Body Image/Disordered Eating
  4.	Self-Harm/Suicide
  5.	Discrimination/Hate Crimes
  6.	Violence & Graphic Content
  7.	Substance Abuse/Addiction
  8.	Child Abuse/Domestic Violence
  9.	Homicide/Gun Violence

The 9 content warning types are NOT an extensive list and are meant to provide general categories for content that may be upsetting or difficult for readers to consume. Content areas were developed with guidance from the National Institute of Health’s Narrative Experiences Online (NEON) content warning typology list (Charles et al., 2022).

All parts of the original specs are implemented into the final program. 

## Install/Deployment Issues 

Basic troubleshooting instructions are included in the User's Guide. 

### Advanced Installation and Configuration

#### Virtual Environments:
Why Use Virtual Environments: For development purposes, it's good practice to work within a virtual environment. This isolates your project dependencies from global Python installations and ensures consistency across development setups.

Creating a Virtual Environment: In the project root directory, run python -m venv venv. This creates a new virtual environment named 'venv'.

Activating the Virtual Environment:
  Windows: Run venv\Scripts\activate.
  macOS/Linux: Run source venv/bin/activate.

Install Dependencies in the Virtual Environment: With the virtual environment activated, run pip install -r requirements.txt (assuming you have a requirements.txt file with all necessary packages listed).

#### Dependency Management:
Requirements File: Ensure that all dependencies are correctly listed in a requirements.txt file. This file should be updated whenever a new library is added or when versions change.

### Running the Application with Elevated Privileges
Depending on the system configuration or specific development tasks (e.g., binding to well-known ports, accessing protected system resources), you might need to run the application with elevated privileges.
  Windows: Right-click on the command prompt and select "Run as administrator".
  macOS/Linux: Use sudo before your command to grant administrative privileges.

### Deployment Considerations
Server Deployment: If deploying a server version of this application (e.g., for an API):
  Ensure the server environment matches the development environment regarding Python version and installed libraries.
  Consider using containerization (like Docker) for easier deployment and scalability.
Database Integration: If your application scales to require a database, ensure proper configuration and connection handling. This might involve setting up a database schema, ORM integration, and connection pooling.

### Debugging and Logging
Implement robust logging to track the application's behavior during development and after deployment. Python's logging module can be configured to log info, warnings, errors, and debug messages.
For debugging, IDEs like PyCharm or VSCode offer integrated debugging tools. Learn to set breakpoints and inspect variables.

### Version Control and Collaboration
Use version control (like Git) for source code management. Regularly commit and push changes to a remote repository.
For collaborative projects, establish a workflow with branches, pull requests, and code reviews to maintain code quality and manage contributions effectively.


## User Walkthrough
## Interaction Flow 
1. Program start: main window is displayed with a search bar and results window (empty) displayed below. 
Involved Elements:
  Window Creation: root = tk.Tk() initializes the main application window.
  Widgets: instructions_label, book_title_label, book_title_entry, search_button, result_frame, result_label, result_text, clear_button, image_frame.

2. Searching for a Book: The user enters a book title and clicks the "Search Content Warning Rating" button.
This triggers the search_book_ratings function.
Involved Functions:
  Input Validation: search_book_ratings checks if the input field is not empty.
  API Calls: It calls get_book_info, which internally uses search_google_books and search_open_books to fetch data from Google Books and Open Library APIs, respectively.



## Known Issues and Limitations 
### API Dependency and Reliability:
The program heavily relies on external APIs (Google Books and Open Library). Any downtime or changes in these APIs could directly impact the functionality of the program.
Changes in API response structures are not dynamically handled, which could lead to issues if either API updates its response format.

### Error Handling:
The current error handling is basic. It primarily focuses on connection issues but may not adequately handle other types of errors (e.g., rate limiting, data format errors).
Errors in image loading and API responses are logged to the console, which may not be visible to all users.

### Rate Limiting:
The program does not currently handle rate limiting imposed by the APIs. Frequent requests in a short period could potentially lead to temporary IP bans or reduced functionality.

### Image Loading Failures:
The program attempts to load book images from URLs provided by the APIs. If the image URL is broken, incorrect, or the server hosting the image is down, the image will not load, but the program does not provide feedback to the user about this failure.

### No Offline Functionality:
The application requires an active internet connection to function, as it fetches data in real-time from online sources. There's no offline capability or caching of previous search results.

### User Interface Limitations:
The current GUI layout is fixed and may not scale well with different screen resolutions or aspect ratios.
Long book titles or author names might not display properly in the GUI.

### Scalability and Performance:
The program is not optimized for handling large volumes of requests or processing large datasets. Performance may degrade with increased load.

### Limited Search Functionality:
Search functionality is basic and does not support advanced queries, filters, or sorting, which might be needed for more refined searches.

### Lack of Automated Testing:
The program lacks automated tests, which are crucial for ensuring code reliability, especially when making changes or adding new features.

### Single-threaded Nature of Tkinter:
Tkinter’s single-threaded nature means that long-running operations (like API calls) can cause the UI to freeze. Implementing asynchronous calls or threading can mitigate this issue.


## Future Work for the Program 
### Enhance Error Handling: 
Implement more comprehensive error handling and user notifications.

### Implement Caching: 
Consider caching API responses to improve performance and add offline functionality.

### UI Improvements: 
Update the UI to be more dynamic and responsive to different content lengths and window sizes.

### Add Automated Testing: 
Develop a suite of automated tests to ensure the reliability and stability of the code.
